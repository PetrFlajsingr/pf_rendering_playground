[files]
resources_path = 'C:\Users\xflajs00\CLionProjects\pf_rendering_playground\resources'

[imgui]
file_dialog_bookmark = ''
imgui_ini = '''[Window][##background_dock_window]
Pos=0,19
Size=1998,1061
Collapsed=0

[Window][Output##output_window]
Pos=8,28
Size=1309,704
Collapsed=0

[Window][Editor##text_input_window]
Pos=1319,28
Size=749,1003
Collapsed=0

[Window][Log##log_window]
Pos=8,777
Size=1237,295
Collapsed=0
DockId=0x00000004,1

[Window][Debug##Default]
Pos=60,60
Size=400,400
Collapsed=0

[Window][Select variable type and name]
Pos=789,450
Size=300,110
Collapsed=0

[Window][Select an image##]
Pos=60,59
Size=822,348
Collapsed=0

[Window][##notif_loading_success]
Pos=1141,895
Size=593,80
Collapsed=0

[Window][Input variable name]
Pos=733,434
Size=300,110
Collapsed=0

[Window][Loading image]
Pos=798,436
Size=300,100
Collapsed=0

[Window][Select an image##FileDialog0]
Pos=788,388
Size=500,300
Collapsed=0

[Window][Shader variables##shader_vars_win]
Pos=1247,27
Size=743,1045
Collapsed=0
DockId=0x00000002,1

[Window][Images##image_assets_win]
Pos=1247,27
Size=743,1045
Collapsed=0
DockId=0x00000002,2

[Window][Select an image##FileDialog1]
Pos=788,388
Size=500,300
Collapsed=0

[Window][Select an image##FileDialog2]
Pos=788,388
Size=500,300
Collapsed=0

[Window][Code##glsl_editor_win]
Pos=1247,27
Size=743,1045
Collapsed=0
DockId=0x00000002,0

[Window][Output##output_win]
Pos=8,27
Size=1237,748
Collapsed=0
DockId=0x00000003,0

[Window][Combined log##combined_log_win]
Pos=8,777
Size=1237,295
Collapsed=0
DockId=0x00000004,0

[Table][0x66C13287,4]
RefScale=14
Column 0  Sort=0v

[Table][0x3CCEE205,4]
RefScale=14
Column 0  Sort=0v

[Table][0xDBEFA148,4]
RefScale=14
Column 0  Sort=0v

[Table][0xF5AF6156,4]
RefScale=14
Column 0  Sort=0v

[Table][0x171A14DB,4]
RefScale=14
Column 0  Sort=0v

[Table][0x03C694A2,4]
RefScale=14
Column 0  Sort=0v

[Table][0x572BC655,4]
RefScale=14
Column 0  Sort=0v

[Table][0xB9708406,4]
RefScale=14
Column 0  Sort=0v

[Table][0x8BBA1978,4]
RefScale=14
Column 0  Sort=0v

[Table][0xB1A159E3,4]
RefScale=14
Column 0  Sort=0v

[Table][0x6EFB18C3,4]
RefScale=14
Column 0  Sort=0v

[Table][0xBD480718,4]
RefScale=14
Column 0  Sort=0v

[Table][0xC9ED1E48,4]
RefScale=14
Column 0  Sort=0v

[Table][0x8A2C5E04,4]
RefScale=14
Column 0  Sort=0v

[Table][0x1301E1EE,4]
RefScale=14
Column 0  Sort=0v

[Table][0x12534E9E,4]
RefScale=14
Column 0  Sort=0v

[Table][0x510645DE,4]
RefScale=14
Column 0  Sort=0v

[Table][0x1F2CCDD6,4]
RefScale=14
Column 0  Sort=0v

[Table][0x244BFFE0,4]
RefScale=14
Column 0  Sort=0v

[Table][0x2D6BE15A,4]
RefScale=14
Column 0  Sort=0v

[Table][0x7D9D1066,4]
RefScale=14
Column 0  Sort=0v

[Table][0xFE78C5A5,4]
RefScale=14
Column 0  Sort=0v

[Table][0x9657DAC5,4]
RefScale=14
Column 0  Sort=0v

[Table][0xDFE6457C,4]
RefScale=14
Column 0  Sort=0v

[Table][0x8BA0824B,4]
RefScale=14
Column 0  Sort=0v

[Table][0xD58FD013,4]
RefScale=14
Column 0  Sort=0v

[Table][0x6E702826,4]
RefScale=14
Column 0  Sort=0v

[Table][0x8EAD813A,4]
RefScale=14
Column 0  Sort=0v

[Table][0x77567FBD,4]
RefScale=14
Column 0  Sort=0v

[Table][0x331CDB14,4]
RefScale=14
Column 0  Sort=0v

[Table][0xB026B4C7,4]
RefScale=14
Column 0  Sort=0v

[Table][0xF37F0DDC,4]
RefScale=14
Column 0  Sort=0v

[Table][0x3A397091,4]
RefScale=14
Column 0  Sort=0v

[Table][0x65BEE728,4]
RefScale=14
Column 0  Sort=0v

[Table][0xEDA23FD6,4]
RefScale=14
Column 0  Sort=0v

[Table][0x483FE8EB,4]
RefScale=14
Column 0  Sort=0v

[Table][0x22DE05A3,4]
RefScale=14
Column 0  Sort=0v

[Table][0xB6251631,4]
RefScale=14
Column 0  Sort=0v

[Table][0x917CAD19,4]
RefScale=14
Column 0  Sort=0v

[Table][0x929BA5F3,4]
RefScale=14
Column 0  Sort=0v

[Table][0xCC29E617,4]
RefScale=14
Column 0  Sort=0v

[Table][0x5F7A32E3,4]
RefScale=14
Column 0  Sort=0v

[Table][0xC9F58C44,4]
RefScale=14
Column 0  Sort=0v

[Table][0xAC06E509,4]
RefScale=14
Column 0  Sort=0v

[Table][0x04A80756,4]
RefScale=14
Column 0  Sort=0v

[Table][0x0F4C9111,4]
RefScale=14
Column 0  Sort=0v

[Table][0x8D860C9A,4]
RefScale=14
Column 0  Sort=0v

[Table][0x64B1D439,4]
RefScale=14
Column 0  Sort=0v

[Table][0xBAA268E6,4]
RefScale=14
Column 0  Sort=0v

[Table][0x4A274D70,4]
RefScale=14
Column 0  Sort=0v

[Table][0x53ACF9A7,4]
RefScale=14
Column 0  Sort=0v

[Table][0x6F4D3824,4]
RefScale=14
Column 0  Sort=0v

[Table][0x87E3CC0F,4]
RefScale=14
Column 0  Sort=0v

[Table][0xE463CA28,4]
RefScale=14
Column 0  Sort=0v

[Table][0xCC583456,4]
RefScale=14
Column 0  Sort=0v

[Table][0x69B4BB39,4]
RefScale=14
Column 0  Sort=0v

[Docking][Data]
DockSpace     ID=0x52D07672 Window=0x946640CE Pos=8,27 Size=1982,1045 Split=X
  DockNode    ID=0x00000001 Parent=0x52D07672 SizeRef=1237,1155 Split=Y
    DockNode  ID=0x00000003 Parent=0x00000001 SizeRef=1215,746 CentralNode=1 Selected=0x62F261AB
    DockNode  ID=0x00000004 Parent=0x00000001 SizeRef=1215,295 Selected=0xEE7D7E4A
  DockNode    ID=0x00000002 Parent=0x52D07672 SizeRef=743,1155 Selected=0x655BFAE3

'''
path_icons = 'C:\Users\xflajs00\CLionProjects\opengl_template\resources\icons'

    [imgui.autocompile_cbkx]
    checked = true

    [imgui.autocompile_f_drag]
    value = 0.10000000149011612

    [imgui.checkbox_1]
    checked = false

    [imgui.combined_log_win_log_panel]
    autoscroll = true
    textwrap = true

    [[imgui.global_vars_panel.values]]
    isColor = true
    name = 'heartColor'
    typeName = 'vec4'
    value = [ 1.0, 0.0, 0.0, 1.0 ]

    [[imgui.global_vars_panel.values]]
    isColor = true
    name = 'squareColor'
    typeName = 'vec4'
    value = [ 0.0, 0.05098039656877518, 0.43137258291244507, 1.0 ]

    [[imgui.global_vars_panel.values]]
    isColor = true
    name = 'sphereColor'
    typeName = 'vec4'
    value = [ 0.6901960968971252, 1.0, 0.0, 1.0 ]

    [[imgui.global_vars_panel.values]]
    isColor = true
    name = 'starColor'
    typeName = 'vec4'
    value = [ 0.803921639919281, 0.0, 0.6745098233222961, 1.0 ]

    [[imgui.global_vars_panel.values]]
    isColor = true
    name = 'backgroundColor1'
    typeName = 'vec4'
    value = [ 1.0, 0.0, 0.8078432083129883, 1.0 ]

    [[imgui.global_vars_panel.values]]
    isColor = true
    name = 'backgroundColor2'
    typeName = 'vec4'
    value = [ 0.0, 0.0941176563501358, 1.0, 1.0 ]

    [[imgui.global_vars_panel.values]]
    name = 'highlightRadius'
    typeName = 'float'
    value = 352.6000061035156

    [[imgui.global_vars_panel.values]]
    isColor = true
    name = 'vingetteColor'
    typeName = 'vec4'
    value = [ 0.9098039865493774, 0.5215686559677124, 0.9647059440612793, 1.0 ]

    [imgui.img_height_cb]
    selected = '1024'

    [imgui.img_panel]
    images = []

    [imgui.img_width_cb]
    selected = '2048'

    [imgui.list_box_1]
    selected = 'item1'

    [imgui.log_window_log_panel]
    autoscroll = true
    textwrap = true

    [imgui.pause_cbkx]
    checked = false

    [imgui.show_main_log]
    checked = true

    [imgui.text_editor]
    text = '''float sdSquare(vec2 uv, float size, vec2 offset) {
    float x = uv.x - offset.x;
    float y = uv.y - offset.y;

    return max(abs(x), abs(y)) - size;
}

float sdCircle(vec2 uv, float r, vec2 offset) {
    float x = uv.x - offset.x;
    float y = uv.y - offset.y;

    return length(vec2(x, y)) - r;
}

float sdHeart(vec2 uv, float size, vec2 offset) {
// Credit: https://mathworld.wolfram.com/HeartCurve.html
    float x = uv.x - offset.x;
    float y = uv.y - offset.y;
    float xx = x * x;
    float yy = y * y;
    float yyy = yy * y;
    float group = xx + yy - size;

    return group * group * group - xx * yyy;
}

float sdStar5(vec2 p, float r, float rf, vec2 offset)
// Credit: https://iquilezles.org/articles/distfunctions2d
{
    p -= offset;
    const vec2 k1 = vec2(0.809016994375, -0.587785252292);
    const vec2 k2 = vec2(-k1.x,k1.y);
    p.x = abs(p.x);
    p -= 2.0*max(dot(k1,p),0.0)*k1;
    p -= 2.0*max(dot(k2,p),0.0)*k2;
    p.x = abs(p.x);
    p.y -= r;
    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);
    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );

    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);
}

vec3 getBackgroundColor(vec2 uv) {
	const ivec2 texCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	return imageLoad(testImg, texCoord).rgb;
	uv.y += 0.5;
	return backgroundColor1.rgb * uv.y + backgroundColor2.rgb * (1.0 - uv.y);
}

vec3 drawScene(vec2 uv) {
	vec3 col = getBackgroundColor(uv);
    float heart = sdHeart(uv, 0.04, vec2(-0.5, 0.));
    float square = sdSquare(uv, 0.1, vec2(0., 0.));
    float circle = sdCircle(uv, 0.1, vec2(0.3, 0.));
    float star = sdStar5(uv, 0.12, 0.45, vec2(0.6, 0.));

    col = mix(heartColor.rgb, col, step(0., heart));
    col = mix(squareColor.rgb, col, step(0., square));
    col = mix(sphereColor.rgb, col, step(0., circle));
    col = mix(starColor.rgb, col, step(0., star));

    return col;
}

void main() {
	const ivec2 texSize = imageSize(outImage);
	const ivec2 texCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

	vec2 uv = vec2(texCoord) / vec2(texSize) - 0.5;
	uv.x *= texSize.x / texSize.y;
	uv.y *= -1;

	vec4 color = vec4(drawScene(uv), 1.0);

	const float dist = distance(texCoord, mousePos.xy);
	if (mouseState == MOUSE_STATE_LEFTDOWN) {
		color.rgb *= 1 - dist / highlightRadius;
	}

	const float vignette = imageLoad(vin, texCoord).r;

	const float sX = max(0.3, sin((texCoord.x / 500.0 + time)));

	color.rgb = mix(vignetteColor.rgb, color.rgb, vignette);
	color.rgb *= sX;
	imageStore(outImage, texCoord, color);
}'''

[modes.Dummy]

[modes.ShaderToy]
initialized = true

    [modes.ShaderToy.editor]
    autoCompile = true
    autoCompilePeriod = 300
    code = '''float sdSquare(vec2 uv, float size, vec2 offset) {
    float x = uv.x - offset.x;
    float y = uv.y - offset.y;

    return max(abs(x), abs(y)) - size;
}

float sdCircle(vec2 uv, float r, vec2 offset) {

    float x = uv.x - offset.x;
    float y = uv.y - offset.y;

    return length(vec2(x, y)) - r;  
}

float sdHeart(vec2 uv, float size, vec2 offset) {
// Credit: https://mathworld.wolfram.com/HeartCurve.html
    float x = uv.x - offset.x; 
    float y = uv.y - offset.y;
    float xx = x * x;
    float yy = y * y;
    float yyy = yy * y; 
    float group = xx + yy - size;

    return group * group * group - xx * yyy;
}

float sdStar5(vec2 p, float r, float rf, vec2 offset)
// Credit: https://iquilezles.org/articles/distfunctions2d
{
    p -= offset;
    const vec2 k1 = vec2(0.809016994375, -0.587785252292);
    const vec2 k2 = vec2(-k1.x,k1.y);
    p.x = abs(p.x);
    p -= 2.0*max(dot(k1,p),0.0)*k1;
    p -= 2.0*max(dot(k2,p),0.0)*k2;
    p.x = abs(p.x);
    p.y -= r;
    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);
    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );

    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);
}

vec3 getBackgroundColor(vec2 uv) {
	const ivec2 bkgImgSize = imageSize(testImg);
	 ivec2 texCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	return imageLoad(testImg,  texCoord).rgb;
	uv.y += 0.5;
	return backgroundColor1.rgb * uv.y + backgroundColor2.rgb * (1.0 - uv.y);
}

vec3 drawScene(vec2 uv) {
	vec3 col = getBackgroundColor(uv);
    float heart = sdHeart(uv, 0.04, vec2(-0.5, 0.));
    float square = sdSquare(uv, 0.1, vec2(0., 0.));
    float circle = sdCircle(uv, 0.1, vec2(0.3, 0.));
    float star = sdStar5(uv, 0.12, 0.45, vec2(0.6, 0.));

    col = mix(heartColor.rgb, col, step(0., heart));
    col = mix(squareColor.rgb, col, step(0., square));
    col = mix(sphereColor.rgb, col, step(0., circle));
    col = mix(starColor.rgb, col, step(0., star));

    return col;
}

void main() {
	const ivec2 texSize = imageSize(outImage);
	const ivec2 texCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

	vec2 uv = vec2(texCoord) / vec2(texSize) - 0.5;
	uv.x *= texSize.x / texSize.y;
	uv.y *= -1;

	vec4 color = vec4(drawScene(uv), 1.0);

	const float dist = distance(texCoord, mousePos.xy);
	if (mouseState == MOUSE_STATE_LEFTDOWN) {
		color.rgb *= 1 - dist / highlightRadius;
	}

	const float vignette = imageLoad(vin, texCoord).r;

	const float sX = max(0.3, sin((texCoord.x / 500.0 + time)));

	color.rgb = mix(vignetteColor.rgb, color.rgb, vignette);  
	color.rgb *= sX;
	imageStore(outImage, texCoord, color);
}  '''
    timePaused = false

    [[modes.ShaderToy.images.images]]
    name = 'testImg'
    path = 'C:\Users\xflajs00\CLionProjects\pf_rendering_playground\cmake-build-debug-visual-studio-2022\test_background.png'

    [[modes.ShaderToy.images.images]]
    name = 'vin'
    path = 'C:\Users\xflajs00\CLionProjects\pf_rendering_playground\cmake-build-debug-visual-studio-2022\vignette.png'

    [modes.ShaderToy.output]
    height = 1024
    width = 2048

    [[modes.ShaderToy.shader_variables.variables]]
    name = 'backgroundColor1'
    type = 'color'
    value = [ 0.7450980544090271, 0.0, 0.9137255549430847, 1.0 ]

    [[modes.ShaderToy.shader_variables.variables]]
    name = 'backgroundColor2'
    type = 'color'
    value = [ 0.0, 0.847058892250061, 1.0, 1.0 ]

    [[modes.ShaderToy.shader_variables.variables]]
    name = 'heartColor'
    type = 'color'
    value = [ 1.0, 0.0, 0.0, 1.0 ]

    [[modes.ShaderToy.shader_variables.variables]]
    name = 'squareColor'
    type = 'color'
    value = [ 0.0, 1.0, 0.007843137718737125, 1.0 ]

    [[modes.ShaderToy.shader_variables.variables]]
    name = 'sphereColor'
    type = 'color'
    value = [ 0.0, 0.0941176563501358, 1.0, 1.0 ]

    [[modes.ShaderToy.shader_variables.variables]]
    name = 'starColor'
    type = 'color'
    value = [ 0.8823530077934265, 1.0, 0.0, 1.0 ]

    [[modes.ShaderToy.shader_variables.variables]]
    name = 'highlightRadius'
    type = 'float'
    value = 717.9000244140625

    [[modes.ShaderToy.shader_variables.variables]]
    name = 'vignetteColor'
    type = 'color'
    value = [ 0.0, 0.0, 0.0, 1.0 ]

[window]
height = 1099
title = 'OpenGL'
width = 1998